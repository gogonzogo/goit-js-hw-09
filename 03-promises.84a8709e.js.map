{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAM,CACVC,KAAMC,SAASC,cAAc,QAC7BC,IAAKF,SAASC,cAAc,WAK9B,SAASE,EAAcC,EAAUC,GACb,IAAIC,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,IAEAC,G,GAEDH,E,IAEOO,MAAK,WACfhB,EAAAiB,OAAOC,QAAQ,qBAAoCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,IAExDW,OAAM,WACLpB,EAAAiB,OAAOI,QAAQ,oBAAmCF,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,IAjB9DP,EAAIC,KAAKmB,iBAAiB,UA4C1B,SAAsBC,GACpBA,EAAEC,iBARoBC,EASP,IAAIC,SAASxB,EAAIC,MAR5BwB,EAAmBC,SAASH,EAAOI,IAAI,UACvCC,EAAuBF,SAASH,EAAOI,IAAI,SAC3CE,EAAoBH,SAASH,EAAOI,IAAI,WAXtBG,EAYPL,EAZkBM,EAYAH,EAZUI,EAYYH,EAXnDC,EAAY,GAAKC,EAAW,GAAKC,EAAa,EAChDlC,EAAAiB,OAAOkB,QAAQ,4CAVnB,SAA6B1B,EAAO2B,EAAWC,GAC7C,IAAKC,EAAI,EAAGA,GAAKD,EAAQC,IAEvB/B,EADsB+B,EACS7B,GAC/BA,GAAS2B,C,CAQTG,CAAoBP,EAAWC,EAAUC,GAI7C,IAAwBT,EAClBE,EACAG,EACAC,EAXkBC,EAAWC,EAAUC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ref = {\n  form: document.querySelector('form'),\n  btn: document.querySelector('button'),\n};\n\nref.form.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  let formPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve();\n      } else {\n        reject();\n      };\n    }, delay);\n  })\n  formPromise.then(() => {\n    Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n    .catch(() => {\n      Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n};\n\nfunction promiseCreationLoop(delay, delayStep, amount) {\n  for (i = 1; i <= amount; i++) {\n    let promisePosition = i;\n    createPromise(promisePosition, delay);\n    delay += delayStep;\n  };\n};\n\nfunction formValidation(formDelay, formStep, formAmount) {\n  if (formDelay < 1 || formStep < 1 || formAmount < 1) {\n    Notify.warning(\"REQUIRED: Inputs must be greater than 0!\");\n  } else {\n    promiseCreationLoop(formDelay, formStep, formAmount);\n  };\n};\n\nfunction formDataParser(object) {\n  let promiseFormDelay = parseInt(object.get('delay'));\n  let promiseFormDelayStep = parseInt(object.get('step'));\n  let promiseFormAmount = parseInt(object.get('amount'));\n  formValidation(promiseFormDelay, promiseFormDelayStep, promiseFormAmount);\n};\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  let formData = new FormData(ref.form);\n  formDataParser(formData);\n};"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$ref","form","document","querySelector","btn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","Notify","success","concat","catch","failure","addEventListener","e","preventDefault","object","FormData","promiseFormDelay","parseInt","get","promiseFormDelayStep","promiseFormAmount","formDelay","formStep","formAmount","warning","delayStep","amount","i","$ce04d3a99e08e73b$var$promiseCreationLoop"],"version":3,"file":"03-promises.84a8709e.js.map"}